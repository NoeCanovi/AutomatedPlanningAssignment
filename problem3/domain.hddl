(define (domain emergency)

(:requirements :strips :typing :hierachie :equality)

(:types
location                    ; where person, robot, box and content can be
person                      ; person in need of help, is at a specific location
robot                       ; carries boxes to person, can move btw locations
carrier                     ; contains more boxes, it is part of the robot
place                       ; each carrier contain
box                         ; containts emergency supplies
food medicine tool - supply ; supplies to be brought to people
)

(:constants 
depot - location)

(:predicates
(patl ?p - person ?l - location)        ; person ?p is at location ?l
(ratl ?r - robot ?l - location)         ; robot ?r is at location ?l
(batl ?b - box ?l - location)           ; box ?b is at location ?l
(satl ?s - supply ?l - location)        ; supply ?s is at location ?l

(hascarrier ?r - robot ?c - carrier)                ; robot ?r has carrier ?c
(hasplace ?c - carrier ?pl - place)                 ; carrier ?c has space ?pl
(hasbox ?pl - place ?b - box)              ; place ?pl has a box ?b
(free ?pl - place)                         ; place ?pl is free


(contain ?b - box ?s - supply)          ; box ?b contains supply ?s
(empty ?b - box)                        ; box ?b is empty

(have ?p - person ?s - supply)          ; person ?p has supply ?s
)

; aid a person by giving them the supply
(:task aid_person
        :parameters (?p - person ?s - supply)
        :precondition ()
        :effect ())

; give supply to person, when the box is already filled with supply and loaded on robot
(:task give_supply
        :parameters (?p - person ?s - supply ?b - box)
        :precondition ()
        :effect ()
)

; fill box and load it onto the robot
(:task fill_and_load
        :parameters (?r - robot ?s - supply ?pl - place ?b - box)
        :precondition()
        :effect()
)

; set condition to fill and load: robot, box, supply have to be at same location
(:task prepare_to_fill
        :parameters (?r - robot ?s - supply ?pl - place ?b - box)
        :precondition()
        :effect())


; aid person
; robot has free space
(:method aid_person_0
        :parameters (?r - robot ?c - carrier ?b - box ?s - supply ?p - person ?l1 ?l2 ?l3 ?l4 - location ?pl - place)
        :task (aid_person ?p ?s)
        :precondition(and 
            (empty ?b) (ratl ?r ?l1) (batl ?b ?l2) (satl ?s ?l3) (patl ?p ?l4)  (hascarrier ?r ?c) (hasplace ?c ?pl) (free ?pl))
        :subtasks (and
            (task0 (fill_and_load ?r ?s ?pl ?b)
            (task1 (give_supply ?p ?s ?b))
        )
        :ordering (and
            (task0 < task1)
        )
    )


; fill and load box with supply
(:method fill_and_load_0
        :parameters (?r - robot ?c - carrier ?pl - place ?b - box ?s - supply ?l1 ?l2 ?l3 - location ?p - person)
        :task (fill_and_load ?r ?s ?pl ?b)
        :precondition (and
            (empty ?b) (ratl ?r ?l1) (batl ?b ?l2) (satl ?s ?l3) (hascarrier ?r ?c) (hasplace ?c ?pl) (free ?pl) 
        )
        :subtasks (and
            (task0 (prepare_to_fill ?r ?s ?pl ?b))
            (task1 (fill ?r ?l3 ?b ?s))
            (task2 (load ?r ?b ?l3 ?c ?pl))
        ) 
        :ordering (and
            (task0 < task1)
            (task1 < task2)
        )
    )


; prepare to fill
; robot, box, supply same location
(:method prepare_to_fill_0
        :parameters (?r - robot ?c - carrier ?pl - place ?b - box ?s - supply ?l - location)
        :task (prepare_to_fill ?r ?s ?pl ?b)
        :precondition (and
            (empty ?b) (ratl ?r ?l) (batl ?b ?l) (satl ?s ?l) (hascarrier ?r ?c) (hasplace ?c ?pl) (free ?pl) 
        )
        :subtasks ()
    )


; prepare to fill
; robot different location, box and supply same location
(:method prepare_to_fill_1
        :parameters (?r - robot ?c - carrier ?pl - place ?b - box ?s - supply ?l1 ?l2 - location)
        :task (prepare_to_fill ?r ?s ?pl ?b)
        :precondition (and
            (empty ?b) (ratl ?r ?l1) (batl ?b ?l2) (satl ?s ?l2) (hascarrier ?r ?c) (hasplace ?c ?pl) (free ?pl) 
        )
        :subtasks (and
            (task0 (move ?r ?l1 ?l2))
        )
    )


; prepare to fill
; robot and box same location, supply different location
(:method prepare_to_fill_2
        :parameters (?r - robot ?c - carrier ?pl - place ?b - box ?s - supply ?l1 ?l2 - location)
        :task (prepare_to_fill ?r ?s ?pl ?b)
        :precondition (and
            (empty ?b) (ratl ?r ?l1) (batl ?b ?l1) (satl ?s ?l2) (hascarrier ?r ?c) (hasplace ?c ?pl) (free ?pl) 
        )
        :subtasks (and
            (task0 (load ?r ?b))
            (task1 (move ?r ?l1 ?l2))
            (task2 (unload ?r ?b ?l2 ?c ?pl))
        )
        :ordering (and
            (task0 < task1)
            (task1 < task2)
        )
    )


; prepare to fill
; robot, box, supply at different locations
(:method prepare_to_fill_3
        :parameters (?r - robot ?c - carrier ?pl - place ?b - box ?s - supply ?l1 ?l2 ?l3 - location)
        :task (prepare_to_fill ?r ?s ?pl ?b)
        :precondition (and
            (empty ?b) (ratl ?r ?l1) (batl ?b ?l2) (satl ?s ?l3) (hascarrier ?r ?c) (hasplace ?c ?pl) (free ?pl)
        :subtasks (and
            (task0 (move ?r ?l1 ?l2))
            (task1 (load ?r ?b ?l2 ?c ?pl))
            (task2 (move ?r ?l2 ?l3))
            (task3 (unload ?r ?b ?l3 ?c ?pl))
        )
        :ordering (and
            (task0 < task1)
            (task1 < task2)
            (task2 < task3)
        )
    )


; give supply to person if robot has box filled with the supply
; robot same location as person
(:method give_supply_to_person_0
		:parameters (?r - robot ?c - carrier ?pl - place ?b - box ?s - supply ?p - person ?l - location)
		:task (give_supply ?p ?s ?b)
		:precondition (and
		    (ratl ?r ?l) (hascarrier ?r ?c) (hasplace ?c ?pl) (hasbox ?pl ?b) (contain ?b ?s) (patl ?p ?l)
		)
		:subtasks (and
            (task0 (unload ?r ?b ?l ?c ?pl))
		    (task1 (give ?r ?l ?b ?s ?p))
		)
        :ordering (and
            (task0 < task1)
        )
		
	)


; give supply to person if robot has box filled with the supply
; robot in different location from person
(:method give_supply_to_person_1
		:parameters (?r - robot ?c - carrier ?pl - place ?b - box ?s - supply ?p - person ?from - location ?l - location)
		:task (give_supply ?p ?s ?b)
		:precondition (and
		    (ratl ?r ?from) (hascarrier ?r ?c) (hasplace ?c ?pl) (hasbox ?pl ?b) (contain ?b ?s) (patl ?p ?l)
		)
		:subtasks (and
            (task0 (move ?r ?from ?l))
            (task1 (unload ?r ?b ?l ?c ?pl))
		    (task2 (give ?r ?l ?b ?s ?p))
		)
        :ordering (and
            (task1 < task2)
            (task0 < task1)
        )
		
	)


; actions

; move robot btw locations
(:action move
    :parameters (?r - robot ?from ?to - location)
    :precondition (and (ratl ?r ?from) (not (= ?from ?to)))
    :effect (and (ratl ?r ?to) (not (ratl ?r ?from)))
)

; robot loads a box if robot and box are in the same location
(:action load
    :parameters (?r - robot ?b - box ?l - location ?c - carrier ?pl - place)
    :precondition (and (ratl ?r ?l) (batl ?b ?l) (hascarrier ?r ?c) (hasplace ?c ?pl) (free ?pl))
    :effect (and (hasbox ?pl ?b) (not (free ?pl)) (not (batl ?b ?l)))
)

; robot unloads a box at some location
(:action unload
    :parameters (?r - robot ?b - box ?l - location ?c - carrier ?pl - place)
    :precondition (and (ratl ?r ?l) (hascarrier ?r ?c) (hasplace ?c ?pl) (hasbox ?pl ?b))
    :effect (and (batl ?b ?l) (free ?pl) (not (hasbox ?pl ?b)))
)

; fill a box with a content, if the box is empty and the supply, the box and the agent are at the same location;
(:action fill
    :parameters (?r - robot ?l - location ?b - box ?s - supply)
    :precondition (and (empty ?b) (ratl ?r ?l) (batl ?b ?l) (satl ?s ?l))
    :effect (and (contain ?b ?s) (not (empty ?b)))
)

; empty a box by leaving the content to the current location, and causing the people at the same location to have the content
(:action give
    :parameters (?r - robot ?l - location ?b - box ?s - supply ?p - person)
    :precondition (and (ratl ?r ?l) (batl ?b ?l) (contain ?b ?s) (patl ?p ?l))
    :effect (and (have ?p ?s) (empty ?b) (not (contain ?b ?s)))
)


)